{"version":3,"file":"parse.js","names":["parseLosslessNumber","revive","parse","text","reviver","parseNumber","i","value","parseValue","expectValue","expectEndOfInput","parseObject","skipWhitespace","object","initial","length","eatComma","key","parseString","undefined","throwObjectKeyExpected","throwDuplicateKey","eatColon","throwObjectKeyOrEndExpected","parseArray","array","expectArrayItem","push","throwArrayItemOrEndExpected","parseNumeric","parseKeyword","name","slice","isWhitespace","result","char","escapeChar","escapeCharacters","isHex","String","fromCharCode","parseInt","throwInvalidUnicodeCharacter","throwInvalidEscapeCharacter","expectEndOfString","start","expectDigit","isNonZeroDigit","isDigit","SyntaxError","gotAt","numSoFar","chars","pos","end","test","got","whitespaceCharacters","b","f","n","r","t"],"sources":["../../src/parse.ts"],"sourcesContent":["import { parseLosslessNumber } from './numberParsers.js'\nimport { revive } from './revive.js'\nimport { GenericObject, JavaScriptValue } from './types'\nimport type { NumberParser, Reviver } from './types'\n\n/**\n * The LosslessJSON.parse() method parses a string as JSON, optionally transforming\n * the value produced by parsing.\n *\n * The parser is based on the parser of Tan Li Hou shared in\n * https://lihautan.com/json-parser-with-javascript/\n *\n * @param text\n * The string to parse as JSON. See the JSON object for a description of JSON syntax.\n *\n * @param [reviver]\n * If a function, prescribes how the value originally produced by parsing is\n * transformed, before being returned.\n *\n * @param [parseNumber=parseLosslessNumber]\n * Pass a custom number parser. Input is a string, and the output can be unknown\n * numeric value: number, bigint, LosslessNumber, or a custom BigNumber library.\n *\n * @returns Returns the Object corresponding to the given JSON text.\n *\n * @throws Throws a SyntaxError exception if the string to parse is not valid JSON.\n */\nexport function parse(\n  text: string,\n  reviver?: Reviver,\n  parseNumber: NumberParser = parseLosslessNumber\n): JavaScriptValue {\n  let i = 0\n  const value = parseValue()\n  expectValue(value)\n  expectEndOfInput()\n\n  return reviver ? revive(value, reviver) : value\n\n  function parseObject(): GenericObject<unknown> | undefined {\n    if (text[i] === '{') {\n      i++\n      skipWhitespace()\n\n      const object: GenericObject<unknown> = {}\n      let initial = true\n      while (i < text.length && text[i] !== '}') {\n        if (!initial) {\n          eatComma()\n          skipWhitespace()\n        } else {\n          initial = false\n        }\n\n        const key = parseString()\n        if (key === undefined) {\n          throwObjectKeyExpected()\n        }\n        if (typeof object[key] !== 'undefined') {\n          // Note that we could also test `if(key in object) {...}`\n          // or `if (object[key] !== 'undefined') {...}`, but that is slower.\n          throwDuplicateKey(key)\n        }\n        skipWhitespace()\n        eatColon()\n        object[key] = parseValue()\n      }\n\n      if (text[i] !== '}') {\n        throwObjectKeyOrEndExpected()\n      }\n      i++\n\n      return object\n    }\n  }\n\n  function parseArray(): Array<unknown> | unknown {\n    if (text[i] === '[') {\n      i++\n      skipWhitespace()\n\n      const array = []\n      let initial = true\n      while (i < text.length && text[i] !== ']') {\n        if (!initial) {\n          eatComma()\n        } else {\n          initial = false\n        }\n\n        const value = parseValue()\n        expectArrayItem(value)\n        array.push(value)\n      }\n\n      if (text[i] !== ']') {\n        throwArrayItemOrEndExpected()\n      }\n      i++\n\n      return array\n    }\n  }\n\n  function parseValue(): unknown {\n    skipWhitespace()\n\n    const value =\n      parseString() ??\n      parseNumeric() ??\n      parseObject() ??\n      parseArray() ??\n      parseKeyword('true', true) ??\n      parseKeyword('false', false) ??\n      parseKeyword('null', null)\n\n    skipWhitespace()\n\n    return value\n  }\n\n  function parseKeyword(name: string, value: unknown): unknown | undefined {\n    if (text.slice(i, i + name.length) === name) {\n      i += name.length\n      return value\n    }\n  }\n\n  function skipWhitespace() {\n    while (isWhitespace(text[i])) {\n      i++\n    }\n  }\n\n  function parseString() {\n    if (text[i] === '\"') {\n      i++\n      let result = ''\n      while (i < text.length && text[i] !== '\"') {\n        if (text[i] === '\\\\') {\n          const char = text[i + 1]\n          const escapeChar = escapeCharacters[char]\n          if (escapeChar !== undefined) {\n            result += escapeChar\n            i++\n          } else if (char === 'u') {\n            if (\n              isHex(text[i + 2]) &&\n              isHex(text[i + 3]) &&\n              isHex(text[i + 4]) &&\n              isHex(text[i + 5])\n            ) {\n              result += String.fromCharCode(parseInt(text.slice(i + 2, i + 6), 16))\n              i += 5\n            } else {\n              throwInvalidUnicodeCharacter(i)\n            }\n          } else {\n            throwInvalidEscapeCharacter(i)\n          }\n        } else {\n          result += text[i]\n        }\n        i++\n      }\n      expectEndOfString()\n      i++\n      return result\n    }\n  }\n\n  function parseNumeric() {\n    const start = i\n    if (text[i] === '-') {\n      i++\n      expectDigit(start)\n    }\n\n    if (text[i] === '0') {\n      i++\n    } else if (isNonZeroDigit(text[i])) {\n      i++\n      while (isDigit(text[i])) {\n        i++\n      }\n    }\n\n    if (text[i] === '.') {\n      i++\n      expectDigit(start)\n      while (isDigit(text[i])) {\n        i++\n      }\n    }\n\n    if (text[i] === 'e' || text[i] === 'E') {\n      i++\n      if (text[i] === '-' || text[i] === '+') {\n        i++\n      }\n      expectDigit(start)\n      while (isDigit(text[i])) {\n        i++\n      }\n    }\n\n    if (i > start) {\n      return parseNumber(text.slice(start, i))\n    }\n  }\n\n  function eatComma() {\n    if (text[i] !== ',') {\n      throw new SyntaxError(`Comma ',' expected after value ${gotAt()}`)\n    }\n    i++\n  }\n\n  function eatColon() {\n    if (text[i] !== ':') {\n      throw new SyntaxError(`Colon ':' expected after property name ${gotAt()}`)\n    }\n    i++\n  }\n\n  function expectValue(value: unknown) {\n    if (value === undefined) {\n      throw new SyntaxError(`JSON value expected ${gotAt()}`)\n    }\n  }\n\n  function expectArrayItem(value: unknown) {\n    if (value === undefined) {\n      throw new SyntaxError(`Array item expected ${gotAt()}`)\n    }\n  }\n\n  function expectEndOfInput() {\n    if (i < text.length) {\n      throw new SyntaxError(`Expected end of input ${gotAt()}`)\n    }\n  }\n\n  function expectDigit(start: number) {\n    if (!isDigit(text[i])) {\n      const numSoFar = text.slice(start, i)\n      throw new SyntaxError(`Invalid number '${numSoFar}', expecting a digit ${gotAt()}`)\n    }\n  }\n\n  function expectEndOfString() {\n    if (text[i] !== '\"') {\n      throw new SyntaxError(`End of string '\"' expected ${gotAt()}`)\n    }\n  }\n\n  function throwObjectKeyExpected() {\n    throw new SyntaxError(`Quoted object key expected ${gotAt()}`)\n  }\n\n  function throwDuplicateKey(key: string) {\n    throw new SyntaxError(`Duplicate key '${key}' encountered at position ${i - key.length - 1}`)\n  }\n\n  function throwObjectKeyOrEndExpected() {\n    throw new SyntaxError(`Quoted object key or end of object '}' expected ${gotAt()}`)\n  }\n\n  function throwArrayItemOrEndExpected() {\n    throw new SyntaxError(`Array item or end of array ']' expected ${gotAt()}`)\n  }\n\n  function throwInvalidEscapeCharacter(start: number) {\n    const chars = text.slice(start, start + 2)\n    throw new SyntaxError(`Invalid escape character '${chars}' ${pos()}`)\n  }\n\n  function throwInvalidUnicodeCharacter(start: number) {\n    let end = start + 2\n    while (/\\w/.test(text[end])) {\n      end++\n    }\n    const chars = text.slice(start, end)\n    throw new SyntaxError(`Invalid unicode character '${chars}' ${pos()}`)\n  }\n\n  // zero based character position\n  function pos(): string {\n    return `at position ${i}`\n  }\n\n  function got(): string {\n    return text[i] ? `but got '${text[i]}'` : 'but reached end of input'\n  }\n\n  function gotAt(): string {\n    return got() + ' ' + pos()\n  }\n}\n\nfunction isWhitespace(char: string): boolean {\n  return whitespaceCharacters[char] === true\n}\n\nfunction isHex(char: string): boolean {\n  return /^[0-9a-fA-F]/.test(char)\n}\n\nfunction isDigit(char: string): boolean {\n  return /[0-9]/.test(char)\n}\n\nfunction isNonZeroDigit(char: string): boolean {\n  return /[1-9]/.test(char)\n}\n\n// map with all escape characters\nconst escapeCharacters: GenericObject<string> = {\n  '\"': '\"',\n  '\\\\': '\\\\',\n  '/': '/',\n  b: '\\b',\n  f: '\\f',\n  n: '\\n',\n  r: '\\r',\n  t: '\\t'\n  // note that \\u is handled separately in parseString()\n}\n\n// map with all whitespace characters\nconst whitespaceCharacters: GenericObject<boolean> = {\n  ' ': true,\n  '\\n': true,\n  '\\t': true,\n  '\\r': true\n}\n"],"mappings":"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"}