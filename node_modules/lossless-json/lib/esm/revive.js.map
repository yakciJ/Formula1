{"version":3,"file":"revive.js","names":["isLosslessNumber","revive","json","reviver","reviveValue","context","key","value","Array","isArray","call","reviveArray","reviveObject","object","Object","keys","forEach","undefined","array","i","length"],"sources":["../../src/revive.ts"],"sourcesContent":["import { isLosslessNumber } from './LosslessNumber.js'\nimport type { GenericObject, Reviver } from './types'\n\n/**\n * Revive a json object.\n * Applies the reviver function recursively on all values in the JSON object.\n * @param json   A JSON Object, Array, or value\n * @param reviver\n *              A reviver function invoked with arguments `key` and `value`,\n *              which must return a replacement value. The function context\n *              (`this`) is the Object or Array that contains the currently\n *              handled value.\n */\nexport function revive(json: unknown, reviver: Reviver): unknown {\n  return reviveValue({ '': json }, '', json, reviver)\n}\n\n/**\n * Revive a value\n */\nfunction reviveValue(\n  context: GenericObject<unknown> | Array<unknown>,\n  key: string,\n  value: unknown,\n  reviver: Reviver\n): unknown {\n  if (Array.isArray(value)) {\n    return reviver.call(context, key, reviveArray(value, reviver))\n  } else if (value && typeof value === 'object' && !isLosslessNumber(value)) {\n    // note the special case for LosslessNumber,\n    // we don't want to iterate over the internals of a LosslessNumber\n    return reviver.call(\n      context,\n      key,\n      reviveObject(value as unknown as GenericObject<unknown>, reviver)\n    )\n  } else {\n    return reviver.call(context, key, value)\n  }\n}\n\n/**\n * Revive the properties of an object\n */\nfunction reviveObject(object: GenericObject<unknown>, reviver: Reviver) {\n  Object.keys(object).forEach((key) => {\n    const value = reviveValue(object, key, object[key], reviver)\n    if (value !== undefined) {\n      object[key] = value\n    } else {\n      delete object[key]\n    }\n  })\n\n  return object\n}\n\n/**\n * Revive the properties of an Array\n */\nfunction reviveArray(array: Array<unknown>, reviver: Reviver): Array<unknown> {\n  for (let i = 0; i < array.length; i++) {\n    array[i] = reviveValue(array, i + '', array[i], reviver)\n  }\n\n  return array\n}\n"],"mappings":";;AAAA,SAASA,gBAAT,QAAiC,qBAAjC;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,MAAT,CAAgBC,IAAhB,EAA+BC,OAA/B,EAA0D;EAC/D,OAAOC,WAAW,CAAC;IAAE,IAAIF;EAAN,CAAD,EAAe,EAAf,EAAmBA,IAAnB,EAAyBC,OAAzB,CAAlB;AACD;AAED;AACA;AACA;;AACA,SAASC,WAAT,CACEC,OADF,EAEEC,GAFF,EAGEC,KAHF,EAIEJ,OAJF,EAKW;EACT,IAAIK,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAJ,EAA0B;IACxB,OAAOJ,OAAO,CAACO,IAAR,CAAaL,OAAb,EAAsBC,GAAtB,EAA2BK,WAAW,CAACJ,KAAD,EAAQJ,OAAR,CAAtC,CAAP;EACD,CAFD,MAEO,IAAII,KAAK,IAAI,QAAOA,KAAP,MAAiB,QAA1B,IAAsC,CAACP,gBAAgB,CAACO,KAAD,CAA3D,EAAoE;IACzE;IACA;IACA,OAAOJ,OAAO,CAACO,IAAR,CACLL,OADK,EAELC,GAFK,EAGLM,YAAY,CAACL,KAAD,EAA6CJ,OAA7C,CAHP,CAAP;EAKD,CARM,MAQA;IACL,OAAOA,OAAO,CAACO,IAAR,CAAaL,OAAb,EAAsBC,GAAtB,EAA2BC,KAA3B,CAAP;EACD;AACF;AAED;AACA;AACA;;;AACA,SAASK,YAAT,CAAsBC,MAAtB,EAAsDV,OAAtD,EAAwE;EACtEW,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoBG,OAApB,CAA4B,UAACV,GAAD,EAAS;IACnC,IAAMC,KAAK,GAAGH,WAAW,CAACS,MAAD,EAASP,GAAT,EAAcO,MAAM,CAACP,GAAD,CAApB,EAA2BH,OAA3B,CAAzB;;IACA,IAAII,KAAK,KAAKU,SAAd,EAAyB;MACvBJ,MAAM,CAACP,GAAD,CAAN,GAAcC,KAAd;IACD,CAFD,MAEO;MACL,OAAOM,MAAM,CAACP,GAAD,CAAb;IACD;EACF,CAPD;EASA,OAAOO,MAAP;AACD;AAED;AACA;AACA;;;AACA,SAASF,WAAT,CAAqBO,KAArB,EAA4Cf,OAA5C,EAA8E;EAC5E,KAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;IACrCD,KAAK,CAACC,CAAD,CAAL,GAAWf,WAAW,CAACc,KAAD,EAAQC,CAAC,GAAG,EAAZ,EAAgBD,KAAK,CAACC,CAAD,CAArB,EAA0BhB,OAA1B,CAAtB;EACD;;EAED,OAAOe,KAAP;AACD"}