{"version":3,"file":"LosslessNumber.js","names":["extractSignificantDigits","getUnsafeNumberReason","isInteger","isNumber","UnsafeNumberReason","LosslessNumber","value","Error","unsafeReason","undefined","truncate_float","parseFloat","BigInt","isLosslessNumber","toLosslessNumber","length","isNaN","isFinite","String"],"sources":["../../src/LosslessNumber.ts"],"sourcesContent":["import {\n  extractSignificantDigits,\n  getUnsafeNumberReason,\n  isInteger,\n  isNumber,\n  UnsafeNumberReason\n} from './utils.js'\n\n/**\n * A lossless number. Stores its numeric value as string\n */\nexport class LosslessNumber {\n  // numeric value as string\n  value: string\n\n  // type information\n  isLosslessNumber = true\n\n  constructor(value: string) {\n    if (!isNumber(value)) {\n      throw new Error('Invalid number (value: \"' + value + '\")')\n    }\n\n    this.value = value\n  }\n\n  /**\n   * Get the value of the LosslessNumber as number or bigint.\n   *\n   * - a number is returned for safe numbers and decimal values that only lose some insignificant digits\n   * - a bigint is returned for big integer numbers\n   * - an Error is thrown for values that will overflow or underflow\n   *\n   * Note that you can implement your own strategy for conversion by just getting the value as string\n   * via .toString(), and using util functions like isInteger, isSafeNumber, getUnsafeNumberReason,\n   * and toSafeNumberOrThrow to convert it to a numeric value.\n   */\n  valueOf(): number | bigint {\n    const unsafeReason = getUnsafeNumberReason(this.value)\n\n    // safe or truncate_float\n    if (unsafeReason === undefined || unsafeReason === UnsafeNumberReason.truncate_float) {\n      return parseFloat(this.value)\n    }\n\n    // truncate_integer\n    if (isInteger(this.value)) {\n      return BigInt(this.value)\n    }\n\n    // overflow or underflow\n    throw new Error(\n      'Cannot safely convert to number: ' +\n        `the value '${this.value}' would ${unsafeReason} and become ${parseFloat(this.value)}`\n    )\n  }\n\n  /**\n   * Get the value of the LosslessNumber as string.\n   */\n  toString(): string {\n    return this.value\n  }\n\n  // Note: we do NOT implement a .toJSON() method, and you should not implement\n  // or use that, it cannot safely turn the numeric value in the string into\n  // stringified JSON since it has to be parsed into a number first.\n}\n\n/**\n * Test whether a value is a LosslessNumber\n */\nexport function isLosslessNumber(value: unknown): value is LosslessNumber {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  return (value && typeof value === 'object' && value.isLosslessNumber === true) || false\n}\n\n/**\n * Convert a number into a LosslessNumber if this is possible in a safe way\n * If the value has too many digits, or is NaN or Infinity, an error will be thrown\n */\nexport function toLosslessNumber(value: number): LosslessNumber {\n  if (extractSignificantDigits(value + '').length > 15) {\n    throw new Error(\n      'Invalid number: contains more than 15 digits and is most likely truncated and unsafe by itself ' +\n        `(value: ${value})`\n    )\n  }\n\n  if (isNaN(value)) {\n    throw new Error('Invalid number: NaN')\n  }\n\n  if (!isFinite(value)) {\n    throw new Error('Invalid number: ' + value)\n  }\n\n  return new LosslessNumber(String(value))\n}\n"],"mappings":";;;;;;;;;;AAAA,SACEA,wBADF,EAEEC,qBAFF,EAGEC,SAHF,EAIEC,QAJF,EAKEC,kBALF,QAMO,YANP;AAQA;AACA;AACA;;AACA,WAAaC,cAAb;EACE;EAGA;EAGA,wBAAYC,KAAZ,EAA2B;IAAA;;IAAA,0CAFR,IAEQ;;IACzB,IAAI,CAACH,QAAQ,CAACG,KAAD,CAAb,EAAsB;MACpB,MAAM,IAAIC,KAAJ,CAAU,6BAA6BD,KAA7B,GAAqC,IAA/C,CAAN;IACD;;IAED,KAAKA,KAAL,GAAaA,KAAb;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EAzBA;IAAA;IAAA,OA0BE,mBAA2B;MACzB,IAAME,YAAY,GAAGP,qBAAqB,CAAC,KAAKK,KAAN,CAA1C,CADyB,CAGzB;;MACA,IAAIE,YAAY,KAAKC,SAAjB,IAA8BD,YAAY,KAAKJ,kBAAkB,CAACM,cAAtE,EAAsF;QACpF,OAAOC,UAAU,CAAC,KAAKL,KAAN,CAAjB;MACD,CANwB,CAQzB;;;MACA,IAAIJ,SAAS,CAAC,KAAKI,KAAN,CAAb,EAA2B;QACzB,OAAOM,MAAM,CAAC,KAAKN,KAAN,CAAb;MACD,CAXwB,CAazB;;;MACA,MAAM,IAAIC,KAAJ,CACJ,2DACgB,KAAKD,KADrB,qBACqCE,YADrC,yBACgEG,UAAU,CAAC,KAAKL,KAAN,CAD1E,CADI,CAAN;IAID;IAED;AACF;AACA;;EAhDA;IAAA;IAAA,OAiDE,oBAAmB;MACjB,OAAO,KAAKA,KAAZ;IACD,CAnDH,CAqDE;IACA;IACA;;EAvDF;;EAAA;AAAA;AA0DA;AACA;AACA;;AACA,OAAO,SAASO,gBAAT,CAA0BP,KAA1B,EAAmE;EACxE;EACA;EACA,OAAQA,KAAK,IAAI,QAAOA,KAAP,MAAiB,QAA1B,IAAsCA,KAAK,CAACO,gBAAN,KAA2B,IAAlE,IAA2E,KAAlF;AACD;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASC,gBAAT,CAA0BR,KAA1B,EAAyD;EAC9D,IAAIN,wBAAwB,CAACM,KAAK,GAAG,EAAT,CAAxB,CAAqCS,MAArC,GAA8C,EAAlD,EAAsD;IACpD,MAAM,IAAIR,KAAJ,CACJ,sHACaD,KADb,MADI,CAAN;EAID;;EAED,IAAIU,KAAK,CAACV,KAAD,CAAT,EAAkB;IAChB,MAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;EACD;;EAED,IAAI,CAACU,QAAQ,CAACX,KAAD,CAAb,EAAsB;IACpB,MAAM,IAAIC,KAAJ,CAAU,qBAAqBD,KAA/B,CAAN;EACD;;EAED,OAAO,IAAID,cAAJ,CAAmBa,MAAM,CAACZ,KAAD,CAAzB,CAAP;AACD"}